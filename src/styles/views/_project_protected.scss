.encrypted-post {
  position: relative;

  &:after {
    content: '';
    position: fixed;
    bottom: 0;
    left: -2rem;
    right: -2rem;
    top: 50%;
    background: linear-gradient(to bottom, rgba(255,255,255,0) 0%,rgba(255,255,255,1) 90%);
    z-index: 1;
  }

  .garbled {
    font-family: Helvetica, Arial, sans-serif;
    color: $neutral-3;
    letter-spacing: -0.01em;
    line-height: 1;
    user-select: none;
    word-break: break-all;
    position: relative;
    overflow: hidden;

    &p {
      margin: 0;
    }

    &:nth-child(1), &:nth-child(4) {
      animation: 13s glitch step-end infinite alternate-reverse;
    }

    &:nth-child(4) {
      animation-duration: 15s;
      animation-delay: -8s;
    }

    &:nth-child(2), &:nth-child(5) {
      animation: 16s glitch2 step-end infinite alternate;
    }

    &:nth-child(5) {
      animation-duration: 15s;
      animation-delay: -3s;
    }

    &:nth-child(3), &:nth-child(6) {
      animation: 17s glitch3 step-end infinite alternate-reverse;
    }

    &:nth-child(6) {
      animation-duration: 13s;
      animation-delay: -4s;
    }    

    &:nth-child(7), &:nth-child(8) {
      animation: 22s glitch4 step-end infinite alternate;
    }
    
    &:nth-child(8) {
      animation-duration: 25s;
      animation-delay: -6s;
    }
  }
}

.password-required {
  @extend %font-sans-extended;
  padding: 1.5rem;
  font-size: 0.8rem;
  background: $neutral-10;
  color: $neutral-2;
  position: relative;
  z-index: 4;
  margin-bottom: 2rem;

  ::selection {
    background: $neutral-4;
  }

  *:focus {
    box-shadow: 0 0 0 3px rgba($color-blue, 0.8);
  }

  a:hover {
    color: $neutral-0;
  }

  h2 {
    @extend %font-sans-extended;
    font-size: 1rem;
    color: $neutral-0;
  }

  .message {
    @extend %font-sans-extended;
    font-size: 0.65rem;
    margin-top: 1rem;
    letter-spacing: 0.02em;
    transition: 0.3s ease;
    transition-delay: 0.2s;
  }

  .password-submit {
    position: relative;

    label {
      @extend %font-sans-extended;
      letter-spacing: 0.02em;
      font-size: 0.65rem;
      font-weight: 600;
      text-transform: uppercase;
      margin-bottom: 0.5rem;
      display: block;
    }

    input[type='text'] {
      background: $neutral-0;
      background-repeat: no-repeat;
      background-position: 1rem center;
      border: none;
      height: 2rem;
      font-size: 16px; // This has to be set to 16px to prevent
                       // input zooming on iOS because reasons
      border-radius: 1rem;
      padding: 0.5rem 1rem 0.5rem calc(1.75rem + 18px);
      width: 100%;
      &[disabled] {
        -webkit-text-fill-color: $color-text; // Override iOS/Android font color change
        -webkit-opacity: 1; // Override iOS opacity change affecting text 
        color: $color-text;
      }
    }
  }

  .password-input-wrapper {
    position: relative;
    svg	{
      position: absolute;
      left: 1rem;
      top: 50%;
      transform: translateY(-50%);
      path {
        fill: $neutral-8;
        transition: 0.2s ease;
      }
    }
  }

  form {
    margin-top: 1.5rem;
    width: 100%;
    &:after {
      // Loading bar
      content: '';
      height: 6px;
      width: 100%;
      background: $color-green;
      position: absolute;
      bottom: 0;
      left: 0;
      transform: scaleX(0);
      transform-origin: left;
    }
    &:not(.error):not(.success) .message {
      margin-top: 0;
      opacity: 0;
      max-height: 0;
    }
    // Added once and then never removed
    &.error {
      .message {
        margin-top: 1rem;
        opacity: 1;
        max-height: 3rem;
      }
    }
    &.success {
      label, .message {
        color: $color-green;
      }
      input[type='text'] {
        box-shadow: 0 0 0 3px $color-green;
      }
      .message {
        margin-top: 1rem;
        opacity: 1;
        max-height: 3rem;        
      }
      .password-input-wrapper svg {
        path {
          fill: $color-green;
        }
        #handle {
          transform: translateY(-2px);
        }
        #base {
          transform: translateY(1px);
        }
      }
      &:after {
        animation: load 3s cubic-bezier(0,.55,.33,-0.21) forwards;
      }
    }

    // Removed on a timer for re-animation
    &.try-again {
      label, .message {
        animation: 3.2s temporaryRedText ease;
      }
      .password-input-wrapper {
        animation: 0.8s tryAgain cubic-bezier(.36,.07,.19,.97) both;
        svg path {
          animation: 3.2s temporaryRedFill ease;
        }
      }
      input[type='text'] {
        animation: 3s temporaryRedBorder ease;
      }
    }
  }
}

@keyframes glitch {
  0%, 11%, 72%, 100% {
    transform: translate3d(0,0,0);
  }
  10% {
    transform: translate3d(-1rem, 0, 0);
  }
  70% {
    transform: translate3d(-0.5rem, 0, 0);
  }
}

@keyframes glitch2 {
  0%, 61% {
    transform: translate3d(0,0,0);
  }
  60% {
    transform: translate3d(2rem, 0, 0);
  }
}

@keyframes glitch3 {
  0%, 43% {
    transform: translate3d(0,0,0);
  }
  40% {
    transform: translate3d(1rem, -0.4rem, 0);
  }
}

@keyframes glitch4 {
  0%, 62% {
    transform: translate3d(0,0,0);
  }
  60% {
    transform: translate3d(-1rem, -4rem, 0);
  }
}

@keyframes tryAgain {
  10% {
    transform: translate3d(-0.7rem, 0, 0);
  }
  
  30% {
    transform: translate3d(-0.8rem, 0, 0);
  }
  
  40% {
    transform: translate3d(1.2rem, 0, 0);
  }
  
  50% {
    transform: translate3d(-1rem, 0, 0);
  }
    
  60% {
    transform: translate3d(0.8rem, 0, 0);
  }

  70% {
    transform: translate3d(-0.4rem, 0, 0);
  }

  80% {
    transform: translate3d(0.3rem, 0, 0);
  }
  
  90% {
    transform: translate3d(-0.2rem, 0, 0)
  }
}

@keyframes temporaryRedText {
  from, 60% {
    color: $color-red;
  }
}

@keyframes temporaryRedFill {
  from, 60% {
    fill: $color-red;
  }
}

@keyframes temporaryRedBorder {
  from, 60% {
    box-shadow: 0 0 0 3px $color-red;
  }
  to {
    box-shadow: 0 0 0 3px inherit;
  }
}

@keyframes load {
  to {
    transform: scaleX(1);
  }
}
