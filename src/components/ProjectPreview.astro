---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";

import { smartquotes } from "../helpers/helpers";

interface Props {
  project: CollectionEntry<"projects">;
}

const { project } = Astro.props;

const { title, description, img, video, url, roles } = project.data;
---

<div class:list={["project", { draft: url === undefined }]}>
  {
    (img ?? video) && (
      <div class="media">
        {img && <Image src={img.src} alt={img.alt} class="img" />}
        {video && (
          <video
            autoplay
            loop
            muted
            playsinline
            preload="none"
            poster={video.poster}
          >
            <source src={video.src} type="video/mp4" />
          </video>
        )}
        {url === undefined && <div class="coming-soon">Coming Soon</div>}
      </div>
    )
  }
  <div class="details">
    <div class="details-text">
      <div class="title-and-tags">
        <h3 class="title">{title}</h3>
        <div class="tags">
          {roles.map((role) => <span class="tag">{role}</span>)}
        </div>
      </div>
      <div class="description">
        {smartquotes(description)}
      </div>
    </div>
    {
      url && (
        <a
          class:list={["link", { disabled: url === undefined }]}
          href={url}
          title="Read the case study"
        />
      )
    }
  </div>
</div>

<style lang="scss">
  .project {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    position: relative;
    overflow: hidden;
    background-color: var(--gray-2);
    border-radius: var(--radius-m);
    transition: background-color 0.2s ease-in-out;

    &::after {
      content: "";
      position: absolute;
      inset: 0;
      border: 1px solid var(--gray-a6);
      border-radius: var(--radius-m);
      pointer-events: none;
      transition: border-color 0.2s ease-in-out;
    }

    .details {
      display: flex;
      flex-direction: column;
      gap: var(--space-m);
      padding: var(--space-l);
      width: 100%;
    }

    &.draft {
      .media *:not(.coming-soon),
      .details {
        opacity: 0.4;
        pointer-events: none;
      }
    }

    @media (hover: hover) and (pointer: fine) {
      &:not(.draft):hover {
        background-color: var(--gray-3);
      }
    }
  }

  .details-text {
    display: flex;
    flex-direction: column;
    gap: var(--space-2xs);
  }

  .title-and-tags {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;

    @media (width < 740px) {
      align-items: flex-start;
      flex-direction: column;
      gap: var(--space-s);

      .tags {
        order: -1;
        justify-content: flex-start;
      }
    }
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-end;
    gap: var(--space-2xs);
    font-size: var(--step--1);
    color: var(--gray-11);

    .tag {
      background-color: var(--gray-4);
      padding-inline: var(--space-2xs);
      border-radius: var(--radius-xs);
    }
  }

  :global(.transitioning) .tags,
  :global(.transitioning) .tag {
    transition:
      color 0.2s ease-in-out,
      background-color 0.2s ease-in-out;
  }

  .media {
    width: 100%;
    max-width: 100%;
    line-height: 0;
    position: relative;

    &::after {
      content: "";
      height: 1px;
      left: 0;
      right: 0;
      bottom: 0;
      position: absolute;
      background-color: var(--gray-a4);
      transition: background-color 0.2s ease-in-out;
    }
  }

  .coming-soon {
    position: absolute;
    font-size: var(--step-1);
    line-height: 1;
    background: var(--gray-12);
    color: var(--gray-1);
    padding: var(--space-xs);
    border-radius: var(--radius-s);
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(-12deg);
    z-index: 1;
  }

  h3 {
    font-size: var(--step-1);
  }

  .description {
    line-height: 1.3;
  }

  .link {
    position: absolute;
    inset: 0;
  }
</style>
