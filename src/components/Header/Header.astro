---
import Center from "../Center.astro";
import { Icon } from "../Icon/Icon";
import Logo from "./Logo.astro";

const currentPath = Astro.url.pathname;
const topLevelPath = currentPath.split("/")[1];
---

<header>
  <Center>
    <nav id="nav">
      <Logo />
      <div class="links">
        <a href="/about" class={topLevelPath === "about" ? "active" : ""}
          >About</a
        >
        <a href="/projects" class={topLevelPath === "projects" ? "active" : ""}
          >Projects</a
        >
        <button type="button" data-theme-toggle aria-label="Toggle theme">
          <Icon icon="sun" size="20" variant="line" className="sun" />
          <Icon icon="moon" size="20" variant="line" className="moon" />
        </button>
      </div>
    </nav>
  </Center>
</header>

<script>
  import { gray, grayDark } from "@radix-ui/colors";

  type Theme = "light" | "dark";

  function getActiveTheme(): Theme {
    return document.body.classList.contains("dark") ? "dark" : "light";
  }

  function setActiveTheme(theme: Theme) {
    // Update class on body
    document.body.classList.remove("transitioning");
    document.body.classList.add("transitioning");

    setTimeout(() => {
      if (theme === "light") document.body.classList.remove("dark");
      else document.body.classList.add("dark");
    }, 100);

    // Update localStorage
    window.localStorage.setItem("theme", theme);

    // Update meta theme
    const metaTheme = document.querySelector('meta[name="theme-color"]');
    if (metaTheme !== null)
      metaTheme.setAttribute(
        "content",
        theme === "dark" ? grayDark.gray1 : gray.gray1
      );

    // Wait for transition to finish
    setTimeout(() => {
      document.body.classList.remove("transitioning");
    }, 300);
  }

  let toggleButton = document.querySelector("[data-theme-toggle]");

  toggleButton &&
    toggleButton.addEventListener("click", () => {
      setActiveTheme(getActiveTheme() === "light" ? "dark" : "light");
    });
</script>

<style lang="scss">
  header {
    // Extend header beyond canvas to prevent blur artifacts along edge
    --header-offset: 20px;

    width: 100%;
    padding-block: calc(var(--space-s) + var(--header-offset)) var(--space-s);
  }

  :global(.transitioning) header {
    transition: box-shadow 0.2s ease-in-out;
  }

  :global(.transitioning) header::before {
    transition: background-color 0.2s ease-in-out;
  }

  nav {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: var(--space-s);
  }

  .links {
    display: flex;
    align-items: stretch;
    gap: var(--space-2xs);

    a,
    button {
      display: inline-flex;
      align-items: center;
      background: transparent;
      line-height: 1;
      color: var(--gray-12);
      padding: var(--space-xs) var(--space-s);
      border: none;
      border-radius: var(--radius-full);
      cursor: pointer;
      transition: background-color 0.2s ease-in-out;

      @media (hover: hover) and (pointer: fine) {
        &:hover {
          background: var(--gray-3);
        }

        &:active {
          background: var(--gray-4);
          transition: none;
        }
      }

      &.active {
        background: var(--gray-4);
      }
    }

    button[data-theme-toggle] {
      justify-content: center;
      position: relative;
      overflow: hidden;
      box-sizing: content-box;
      width: 20px;
      height: 20px;
      padding-inline: var(--space-xs);

      :global(svg) {
        transform-origin: 50% 200%;
        transition:
          transform 0.4s ease-out,
          opacity 0.2s ease-in-out;
        position: absolute;
      }
    }
  }

  :global(body:not(.dark) .moon) {
    transform: rotate(60deg);
  }

  :global(.dark .sun) {
    transform: rotate(-60deg);
  }
</style>
