---
import "../styles/reset.module.css";
import "../styles/base.module.css";
import "../styles/typography.module.css";
import "../styles/theme.module.css";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta
      name="theme-color"
      content="#ffdcdc"
      media="(prefers-color-scheme: light)"
    />
    <meta
      name="theme-color"
      content="#1d0206"
      media="(prefers-color-scheme: dark)"
    />
    <link rel="icon" href="favicon.ico" />
    <link rel="apple-touch-icon" href="apple-touch-icon.png" />
    <link rel="manifest" href="manifest.json" />
    <script>
      // Asynchronously load Adobe Fonts
      // https://www.jayfreestone.com/writing/avoiding-repeat-async-fout/

      const fontKey = "fontLoaded";
      const stylesheet = "https://use.typekit.net/qbm1slx.css";
      // Once the font has loaded:
      // - Set the media type, thereby applying the CSS.
      // - Store a boolean indicating we've already loaded the font.
      function onFontLoad(script) {
        script.media = "all";
        sessionStorage.setItem(fontKey, "true");
      }

      // If we've loaded it once before, load the CSS in a blocking way.
      // Otherwise, we load it asynchronously.
      const styleTag = sessionStorage.getItem(fontKey)
        ? `<link rel="stylesheet" href="${stylesheet}">`
        : `<link rel="stylesheet" href="${stylesheet}" media="print" onload="onFontLoad(this)">`;

      document.write(styleTag);
    </script>
    <title>{title}</title>
  </head>
  <body>
    <main>
      <slot />
    </main>
  </body>
</html>
