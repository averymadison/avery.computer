---
import UnstyledBase from "../../../layouts/UnstyledBase.astro";
---

<UnstyledBase title="P5 Experiments" description="p5p5p5p5p5p5p5p5">
  <div id="p5canvas"></div>
</UnstyledBase>

<script>
  import p5 from "p5";
  import colors from "nice-color-palettes";

  const sketch = (p: p5) => {
    const w = window.innerWidth;
    const h = window.innerHeight;

    const cellSize = 8;

    let palette = colors[0];

    const gridWidth = w / cellSize;
    const gridHeight = h / cellSize;

    let scaleX: number;
    let scaleY: number;

    let t = 0;

    p.setup = () => {
      p.createCanvas(w, h);

      // Seed the noise function
      p.noiseSeed(Math.random());

      // Random scale factors for noise
      scaleX = Math.random() * 50;
      scaleY = Math.random() * 50;

      palette = colors[Math.floor(Math.random() * colors.length)];

      // No loop needed unless you want to animate or interact
      // p.noLoop();
    };

    p.draw = () => {
      p.background(255);
      p.noStroke();
      t += 0.005;

      for (var i = 0; i < gridWidth; i++) {
        for (var j = 0; j < gridHeight; j++) {
          // Generate Perlin noise value for this cell
          var noiseVal = p.noise(i / scaleX + t, j / scaleY + t, t);

          if (noiseVal < 0.3) {
            p.fill(palette[0]);
          } else if (noiseVal < 0.4) {
            p.fill(palette[1]);
          } else if (noiseVal < 0.5) {
            p.fill(palette[2]);
          } else if (noiseVal < 0.7) {
            p.fill(palette[3]);
          } else p.fill(palette[4]);

          // Draw the rectangle for this grid cell
          p.rect(i * cellSize, j * cellSize, cellSize, cellSize);
        }
      }
    };
  };

  const canvas = document.getElementById("p5canvas");
  export const myp5 = new p5(sketch, canvas!);
</script>

<style>
  #p5canvas {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }
</style>
